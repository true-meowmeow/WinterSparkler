package swing.pages.home.play;

import core.contentManager.FileData;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.List;

public class FolderSystemPanel extends JPanel {

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
     */
    public FolderSystemPanel(List<FileData> audioFiles) {
        // –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç —Å–µ–∫—Ü–∏–∏ –æ–¥–Ω—É –ø–æ–¥ –¥—Ä—É–≥–æ–π.
        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        updateAudioFiles(audioFiles);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏ –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.
     */
    public void updateAudioFiles(List<FileData> newAudioFiles) {
        removeAll();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ (rootPath)
        Map<String, List<FileData>> rootMap = new LinkedHashMap<>();
        for (FileData file : newAudioFiles) {
            String rootPath = file.getRootPath();
            rootMap.computeIfAbsent(rootPath, k -> new ArrayList<>()).add(file);
        }

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ —Å–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é
        for (Map.Entry<String, List<FileData>> entry : rootMap.entrySet()) {
            String rootPath = entry.getKey();
            List<FileData> files = entry.getValue();
            JPanel rootSection = createRootSection(rootPath, files);
            add(rootSection);
        }

        revalidate();
        repaint();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏.
     * –í —Å–µ–∫—Ü–∏–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è:
     *  - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—É—Ç—ë–º (rootPath)
     *  - –î–≤–∞ —Ä–∞–∑–¥–µ–ª–∞: "–ü–∞–ø–∫–∏:" –∏ "–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã:".
     *    –§–∞–π–ª—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö relativePath –Ω–µ –ø—É—Å—Ç–æ–π, –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É (–ø–æ–¥–ø–∞–ø–∫–µ)
     *    –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ –ø–∞–ø–∫–∏ (–∏–∫–æ–Ω–∫–∞ üìÅ). –§–∞–π–ª—ã –±–µ–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ ‚Äì –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã (–∏–∫–æ–Ω–∫–∞ üéµ).
     */
    private JPanel createRootSection(String rootPath, List<FileData> files) {
        // –ü–∞–Ω–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (—Ç–∏—Ç—É–ª ‚Äì –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ)
        JPanel sectionPanel = new JPanel();
        sectionPanel.setLayout(new BorderLayout());
        sectionPanel.setBorder(BorderFactory.createTitledBorder(rootPath));

        // –ü–∞–Ω–µ–ª—å –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏,
        // –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–Ω–∞—á–∞–ª–∞ –∏–¥—É—Ç –ø–ª–∏—Ç–∫–∏ –¥–ª—è –ø–æ–¥–ø–∞–ø–æ–∫, –∑–∞—Ç–µ–º ‚Äì –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
        JPanel contentPanel = new JPanel();
        // BoxLayout –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ ‚Äì —Å–Ω–∞—á–∞–ª–∞ –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª, –∑–∞—Ç–µ–º –¥—Ä—É–≥–æ–π
        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));

        // –î–ª—è —Ñ–∞–π–ª–æ–≤, –ª–µ–∂–∞—â–∏—Ö –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ (relativePath –ø—É—Å—Ç–æ–π)
        List<FileData> filesInRoot = new ArrayList<>();
        // –î–ª—è —Ñ–∞–π–ª–æ–≤, –ª–µ–∂–∞—â–∏—Ö –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö ‚Äì –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–∏
        Map<String, List<FileData>> subfolderMap = new LinkedHashMap<>();

        for (FileData file : files) {
            String rel = file.getRelativePath();
            if (rel == null) {
                rel = "";
            }
            rel = rel.trim();
            // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª—ç—à, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (rel.endsWith("/")) {
                rel = rel.substring(0, rel.length() - 1);
            }
            if (rel.isEmpty()) {
                filesInRoot.add(file);
            } else {
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º –ø—É—Ç–∏
                String[] parts = rel.split("/");
                if (parts.length > 0) {
                    String folderName = parts[0];
                    subfolderMap.computeIfAbsent(folderName, k -> new ArrayList<>()).add(file);
                }
            }
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∞–ø–∫–∏, —Å–æ–∑–¥–∞—ë–º –¥–ª—è –Ω–∏—Ö –ø–∞–Ω–µ–ª—å —Å –ø–ª–∏—Ç–∫–∞–º–∏
        if (!subfolderMap.isEmpty()) {
            JLabel subfoldersLabel = new JLabel("–ü–∞–ø–∫–∏:");
            subfoldersLabel.setAlignmentX(LEFT_ALIGNMENT);
            contentPanel.add(subfoldersLabel);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º FlowLayout –¥–ª—è –ø–ª–∏—Ç–æ–∫ (–æ–Ω–∏ –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤ —Å—Ç—Ä–æ–∫–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–æ–≤—É—é –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –º–µ—Å—Ç–∞)
            JPanel foldersPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
            foldersPanel.setAlignmentX(LEFT_ALIGNMENT);
            for (String folderName : subfolderMap.keySet()) {
                JPanel tile = createTile("üìÅ " + folderName);
                foldersPanel.add(tile);
            }
            contentPanel.add(foldersPanel);
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ, —Å–æ–∑–¥–∞—ë–º –¥–ª—è –Ω–∏—Ö –ø–∞–Ω–µ–ª—å —Å –ø–ª–∏—Ç–∫–∞–º–∏
        if (!filesInRoot.isEmpty()) {
            JLabel filesLabel = new JLabel("–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã:");
            filesLabel.setAlignmentX(LEFT_ALIGNMENT);
            contentPanel.add(filesLabel);

            JPanel filesPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
            filesPanel.setAlignmentX(LEFT_ALIGNMENT);
            for (FileData file : filesInRoot) {
                JPanel tile = createTile("üéµ " + file.getFileName());
                filesPanel.add(tile);
            }
            contentPanel.add(filesPanel);
        }

        sectionPanel.add(contentPanel, BorderLayout.CENTER);
        return sectionPanel;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç ¬´–ø–ª–∏—Ç–∫—É¬ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ (–ø–∞–ø–∫–∞ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª).
     * –ü–ª–∏—Ç–∫–∞ –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –≥—Ä–∞–Ω–∏—Ü—É.
     */
    private JPanel createTile(String text) {
        JPanel tile = new JPanel(new BorderLayout());
        tile.setPreferredSize(new Dimension(100, 100));
        tile.setMaximumSize(new Dimension(100, 100));
        tile.setBorder(BorderFactory.createLineBorder(Color.GRAY));

        // –ú–µ—Ç–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ImageIcon –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)
        JLabel iconLabel = new JLabel("", SwingConstants.CENTER);
        iconLabel.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 32));
        // –ó–¥–µ—Å—å —Ç–µ–∫—Å—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏ (üìÅ –∏–ª–∏ üéµ), –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –∏ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ

        // –ú–µ—Ç–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º (–∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞)
        JLabel nameLabel = new JLabel(text, SwingConstants.CENTER);
        nameLabel.setFont(new Font("Arial", Font.PLAIN, 12));
        nameLabel.setPreferredSize(new Dimension(100, 20));

        tile.add(iconLabel, BorderLayout.CENTER);
        tile.add(nameLabel, BorderLayout.SOUTH);
        return tile;
    }
}
